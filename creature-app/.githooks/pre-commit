#!/bin/bash

# Pre-commit hook to prevent hardcoded values and mixed approaches
# This enforces our "single canonical approach" principle

echo "üîç Checking for hardcoded patterns that shouldn't be committed..."

# Colors that should use design tokens instead
HARDCODED_PATTERNS=(
    # Background colors
    "bg-white"
    "bg-gray-[0-9]+"
    "bg-slate-[0-9]+"
    "bg-stone-[0-9]+"
    "bg-zinc-[0-9]+"

    # Text colors
    "text-gray-[0-9]+"
    "text-slate-[0-9]+"
    "text-stone-[0-9]+"
    "text-zinc-[0-9]+"

    # Border colors
    "border-gray-[0-9]+"
    "border-slate-[0-9]+"

    # Ring colors
    "ring-gray-[0-9]+"
    "ring-slate-[0-9]+"

    # Hover states
    "hover:bg-gray-[0-9]+"
    "hover:bg-slate-[0-9]+"
    "hover:text-gray-[0-9]+"

    # Focus states
    "focus:bg-gray-[0-9]+"
    "focus:border-gray-[0-9]+"
)

# Anti-patterns that indicate mixed approaches
ANTI_PATTERNS=(
    # Mixed CSS approaches
    "style="                    # Inline styles (should use classes)
    "className.*#[0-9a-fA-F]"   # Hardcoded hex colors in className
    "rgb\([0-9, ]+\)"           # RGB values instead of design tokens
    "hsl\([0-9, %]+\)"          # HSL values (except in CSS custom properties)

    # Mixed state management
    "useState.*\[\].*useState"  # Multiple useState for related state (should use single object)

    # Mixed naming conventions
    "const [a-z].*_[a-z]"       # Mixed camelCase and snake_case
    "function [A-Z]"            # PascalCase function (should be camelCase)

    # Legacy/deprecated patterns
    "React.FC"                  # Should use function components without FC
    "defaultProps"              # Deprecated in favor of default parameters
    "UNSAFE_"                   # Unsafe React methods

    # Console statements in production files
    "console\.(log|warn|error)" # Should use proper logging
    "debugger"                  # Debug statements

    # TODO/FIXME without tracking
    "TODO(?!\s*\(#[0-9]+\))"    # TODO without issue reference
    "FIXME(?!\s*\(#[0-9]+\))"   # FIXME without issue reference
    "HACK"                      # Should never commit hacks
    "XXX"                       # Placeholder comments
)

# Files to exclude from checks (generated files, etc.)
EXCLUDE_PATTERNS=(
    "\.d\.ts$"
    "node_modules/"
    "dist/"
    "build/"
    "\.git/"
    "package-lock\.json"
    "yarn\.lock"
)

VIOLATIONS_FOUND=false
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|tsx|js|jsx|css|scss)$')

if [ -z "$STAGED_FILES" ]; then
    echo "‚úÖ No relevant files to check"
    exit 0
fi

# Function to check if file should be excluded
should_exclude_file() {
    local file=$1
    for pattern in "${EXCLUDE_PATTERNS[@]}"; do
        if [[ $file =~ $pattern ]]; then
            return 0  # Should exclude
        fi
    done
    return 1  # Should not exclude
}

# Check for hardcoded color patterns
echo "üé® Checking for hardcoded colors..."
for file in $STAGED_FILES; do
    if should_exclude_file "$file"; then
        continue
    fi

    for pattern in "${HARDCODED_PATTERNS[@]}"; do
        # Get the staged content of the file
        matches=$(git show :$file 2>/dev/null | grep -n -E "$pattern" | head -5)
        if [ -n "$matches" ]; then
            echo "‚ùå $file: Found hardcoded pattern '$pattern'"
            echo "$matches" | sed 's/^/   /'
            VIOLATIONS_FOUND=true
        fi
    done
done

# Check for anti-patterns
echo "üö´ Checking for anti-patterns..."
for file in $STAGED_FILES; do
    if should_exclude_file "$file"; then
        continue
    fi

    for pattern in "${ANTI_PATTERNS[@]}"; do
        # Get the staged content of the file
        matches=$(git show :$file 2>/dev/null | grep -n -E "$pattern" | head -3)
        if [ -n "$matches" ]; then
            echo "‚ùå $file: Found anti-pattern '$pattern'"
            echo "$matches" | sed 's/^/   /'
            VIOLATIONS_FOUND=true
        fi
    done
done

# Check for missing design token usage where expected
echo "üéØ Checking for missing design token usage..."
for file in $STAGED_FILES; do
    if should_exclude_file "$file"; then
        continue
    fi

    # Check for className with colors that should use tokens
    missing_tokens=$(git show :$file 2>/dev/null | grep -n 'className.*".*bg-white\|className.*".*text-black' | head -3)
    if [ -n "$missing_tokens" ]; then
        echo "‚ùå $file: Should use design tokens instead of hardcoded colors"
        echo "$missing_tokens" | sed 's/^/   /'
        VIOLATIONS_FOUND=true
    fi
done

# Specific checks for our design system
echo "üèóÔ∏è  Checking design system consistency..."
for file in $STAGED_FILES; do
    if should_exclude_file "$file"; then
        continue
    fi

    # Check for mixed theme approaches
    if [[ $file == *"components/"* ]] || [[ $file == *"pages/"* ]]; then
        # Components should use semantic tokens, not hardcoded values
        mixed_approach=$(git show :$file 2>/dev/null | grep -n 'bg-\(white\|gray-\)' | head -2)
        if [ -n "$mixed_approach" ]; then
            echo "‚ùå $file: Component should use semantic tokens (bg-surface-primary, bg-surface-secondary, etc.)"
            echo "$mixed_approach" | sed 's/^/   /'
            VIOLATIONS_FOUND=true
        fi
    fi
done

if [ "$VIOLATIONS_FOUND" = true ]; then
    echo ""
    echo "üõë COMMIT REJECTED: Found hardcoded patterns or anti-patterns"
    echo ""
    echo "üí° Guidelines:"
    echo "   ‚Ä¢ Use design tokens: bg-surface-primary instead of bg-white"
    echo "   ‚Ä¢ Use semantic colors: text-primary instead of text-gray-900"
    echo "   ‚Ä¢ Follow single canonical approach principle"
    echo "   ‚Ä¢ Remove console.log statements and debug code"
    echo "   ‚Ä¢ Add issue references to TODO/FIXME comments"
    echo ""
    echo "üîß To fix:"
    echo "   ‚Ä¢ Replace hardcoded colors with design tokens"
    echo "   ‚Ä¢ Use semantic CSS classes from our design system"
    echo "   ‚Ä¢ Follow established patterns in the codebase"
    echo ""
    exit 1
else
    echo "‚úÖ All checks passed! No hardcoded patterns found."
    exit 0
fi