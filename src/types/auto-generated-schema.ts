// Auto-generated Zod schema based on analysis of 3654 creatures
import { z } from 'zod';

export const AutoGeneratedCreatureSchema = z.object({
  _metadata: z.object({}).passthrough(),
  ability_scores: z.object({}).passthrough(),
  ac: z.number(),
  ac_data: z.object({}).passthrough(),
  ac_parsed: z.object({}).passthrough(),
  alignment: z.string(),
  alignment_clean: z.string(),
  asterisk: z.object({}).passthrough().nullable(),
  attacks: z.object({}).passthrough(),
  auras: z.array(z.object({}).passthrough()).nullable(),
  auras_normalized: z.union([z.array(z.unknown()), z.array(z.object({}).passthrough())]),
  bab: z.number(),
  bab_parsed: z.object({}).passthrough(),
  cmb: z.number().nullable(),
  cmb_other: z.string().nullable(),
  cmb_parsed: z.object({}).passthrough().optional(),
  cmd: z.number().nullable(),
  cmd_other: z.string().nullable(),
  cmd_parsed: z.object({}).passthrough().optional(),
  cr: z.number().nullable(),
  cr_parsed: z.object({}).passthrough().optional(),
  defensive_abilities: z.union([z.array(z.unknown()), z.array(z.string())]),
  defensive_abilities_normalized: z.union([z.array(z.unknown()), z.array(z.string())]),
  desc_long: z.string(),
  desc_short: z.string(),
  dr: z.array(z.object({}).passthrough()).nullable(),
  ecology: z.object({}).passthrough(),
  environment: z.string(),
  environment_clean: z.string().optional(),
  feats: z.union([z.array(z.string()), z.array(z.unknown())]),
  feats_raw: z.union([z.array(z.object({}).passthrough()), z.array(z.unknown())]),
  flat_ac: z.number(),
  flat_ac_parsed: z.object({}).passthrough(),
  fort: z.number(),
  fort_parsed: z.object({}).passthrough(),
  gear: z.object({}).passthrough().nullable(),
  "grapple_3.5": z.union([z.number(), z.string()]).nullable(),
  hp: z.object({}).passthrough(),
  immunities: z.array(z.string()).nullable(),
  immunities_normalized: z.union([z.array(z.string()), z.array(z.unknown())]),
  initiative: z.union([z.number(), z.array(z.number())]),
  initiative_parsed: z.object({}).passthrough(),
  "is_3.5": z.boolean().nullable(),
  kineticist_wild_talents: z.object({}).passthrough().nullable(),
  languages: z.union([z.array(z.string()), z.array(z.unknown())]),
  languages_normalized: z.union([z.array(z.string()), z.array(z.unknown())]),
  mr: z.number().nullable(),
  mr_parsed: z.object({}).passthrough().optional(),
  name: z.string(),
  name_clean: z.string(),
  npc_boon: z.string().nullable(),
  psychic_magic: z.object({}).passthrough().nullable(),
  race_class: z.object({}).passthrough().nullable(),
  reach: z.number().nullable(),
  reach_other: z.string().nullable(),
  reach_parsed: z.object({}).passthrough().optional(),
  ref: z.number(),
  ref_parsed: z.object({}).passthrough(),
  resistances: z.object({}).passthrough().nullable(),
  saves_data: z.object({}).passthrough(),
  second_statblock: z.boolean().nullable(),
  senses: z.object({}).passthrough(),
  size: z.string(),
  size_clean: z.string(),
  skills: z.object({}).passthrough(),
  sources: z.array(z.object({}).passthrough()),
  space: z.number().nullable(),
  space_parsed: z.object({}).passthrough().optional(),
  special_abilities: z.object({}).passthrough(),
  special_qualities: z.union([z.array(z.string()), z.array(z.unknown())]),
  special_qualities_normalized: z.union([z.array(z.string()), z.array(z.unknown())]),
  speeds: z.object({}).passthrough(),
  spell_like_abilities: z.object({}).passthrough(),
  spells: z.object({}).passthrough(),
  sr: z.union([z.number(), z.string()]).nullable(),
  sr_parsed: z.object({}).passthrough().optional(),
  subtypes: z.union([z.array(z.unknown()), z.array(z.string())]),
  subtypes_normalized: z.union([z.array(z.unknown()), z.array(z.string())]),
  tactics: z.object({}).passthrough().nullable(),
  touch_ac: z.number(),
  touch_ac_parsed: z.object({}).passthrough(),
  type: z.string(),
  type_clean: z.string(),
  url: z.string(),
  weaknesses: z.array(z.string()).nullable(),
  weaknesses_normalized: z.union([z.array(z.unknown()), z.array(z.string())]),
  will: z.number(),
  will_parsed: z.object({}).passthrough(),
  xp: z.number().nullable(),
  xp_parsed: z.object({}).passthrough().optional(),
});

export type AutoGeneratedCreature = z.infer<typeof AutoGeneratedCreatureSchema>;
